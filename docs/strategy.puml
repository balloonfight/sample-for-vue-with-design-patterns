@startuml View And State
package View {
  class App
  class "LoadingStateList" as VStateList
  class "LoadingState" as VState
  class Button

  App o-r-> VStateList
  VStateList o-r-> "n" VState

  App o-r-> Button
}

package Controller {
  class Interactor
}

package State {
  interface ButtonBehavior
  interface "LoadingState" as MState {
    activated: boolean
  }
  class "LoadingStateList" as MStateList
  MStateList o-l-> "n" MState

  AppState o--> MStateList
  Interactor .r.> AppState : create
  Interactor ..> ButtonBehavior : use
}

App --> Interactor
App o--> AppState
VStateList ..> MStateList
VState ..> MState
Button ..> ButtonBehavior
@enduml

@startuml Strategy Pattern
package State {
  interface ButtonBehavior
  class "StateList" as MStateList
  interface "State" as MState {
    activated: boolean
  }
  AppState o-r-> MStateList
  MStateList o-r-> "n" MState
  MState -r-> "1" ButtonBehavior

  MState <|.. Loading
  MState <|.. Success
  MState <|.. Failure

  ButtonBehavior <|.. NoAction
  ButtonBehavior <|.. Alert
  ButtonBehavior <|.. Reload
}

package Controller {
  class Interactor
}

Interactor .r.> AppState : create
Interactor ..> ButtonBehavior : use
@enduml
