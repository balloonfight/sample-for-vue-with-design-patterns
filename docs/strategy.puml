@startuml View And Model
package View {
  class App
  class "StateList" as VStateList
  class "State" as VState
  class Button

  App o-r-> VStateList
  VStateList o-r-> "n" VState

  App o-r-> Button
}

package Application {
  class Interactor
}

package Model {
  interface ButtonBehavior
  interface "State" as MState {
    activated: boolean
  }
  class "StateList" as MStateList
  MStateList o-l-> "n" MState

  AppState o--> MStateList
  Interactor .r.> AppState : create
  Interactor ..> ButtonBehavior : use
}

App --> Interactor
App o--> AppState
VStateList ..> MStateList
VState ..> MState
Button ..> ButtonBehavior
@enduml

@startuml Strategy Pattern
package Model {
  interface ButtonBehavior
  class "StateList" as MStateList
  interface "State" as MState {
    activated: boolean
  }
  AppState o-r-> MStateList
  MStateList o-r-> "n" MState
  MState -r-> "1" ButtonBehavior
}

package "Application" as App1 {
  class Interactor
}
package "Application" as App2 {
  class Loading
  class Success
  class Failure
  
  class NoAction
  class Alert
  class Reload
}

Interactor .r.> AppState : create
Interactor ..> ButtonBehavior : use

MState <|.. Loading
MState <|.. Success
MState <|.. Failure

ButtonBehavior <|.. NoAction
ButtonBehavior <|.. Alert
ButtonBehavior <|.. Reload
@enduml
